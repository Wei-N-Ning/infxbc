// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reward/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetRewardRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *QueryGetRewardRequest) Reset()         { *m = QueryGetRewardRequest{} }
func (m *QueryGetRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRewardRequest) ProtoMessage()    {}
func (*QueryGetRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05f327bea4a9f461, []int{0}
}
func (m *QueryGetRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRewardRequest.Merge(m, src)
}
func (m *QueryGetRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRewardRequest proto.InternalMessageInfo

func (m *QueryGetRewardRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type QueryGetRewardResponse struct {
	Reward *RewardV01 `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (m *QueryGetRewardResponse) Reset()         { *m = QueryGetRewardResponse{} }
func (m *QueryGetRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRewardResponse) ProtoMessage()    {}
func (*QueryGetRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05f327bea4a9f461, []int{1}
}
func (m *QueryGetRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRewardResponse.Merge(m, src)
}
func (m *QueryGetRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRewardResponse proto.InternalMessageInfo

func (m *QueryGetRewardResponse) GetReward() *RewardV01 {
	if m != nil {
		return m.Reward
	}
	return nil
}

type QueryGetRewardV01Request struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetRewardV01Request) Reset()         { *m = QueryGetRewardV01Request{} }
func (m *QueryGetRewardV01Request) String() string { return proto.CompactTextString(m) }
func (*QueryGetRewardV01Request) ProtoMessage()    {}
func (*QueryGetRewardV01Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_05f327bea4a9f461, []int{2}
}
func (m *QueryGetRewardV01Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRewardV01Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRewardV01Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRewardV01Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRewardV01Request.Merge(m, src)
}
func (m *QueryGetRewardV01Request) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRewardV01Request) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRewardV01Request.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRewardV01Request proto.InternalMessageInfo

func (m *QueryGetRewardV01Request) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetRewardV01Response struct {
	RewardV01 *RewardV01 `protobuf:"bytes,1,opt,name=RewardV01,proto3" json:"RewardV01,omitempty"`
}

func (m *QueryGetRewardV01Response) Reset()         { *m = QueryGetRewardV01Response{} }
func (m *QueryGetRewardV01Response) String() string { return proto.CompactTextString(m) }
func (*QueryGetRewardV01Response) ProtoMessage()    {}
func (*QueryGetRewardV01Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_05f327bea4a9f461, []int{3}
}
func (m *QueryGetRewardV01Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRewardV01Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRewardV01Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRewardV01Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRewardV01Response.Merge(m, src)
}
func (m *QueryGetRewardV01Response) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRewardV01Response) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRewardV01Response.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRewardV01Response proto.InternalMessageInfo

func (m *QueryGetRewardV01Response) GetRewardV01() *RewardV01 {
	if m != nil {
		return m.RewardV01
	}
	return nil
}

type QueryAllRewardV01Request struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRewardV01Request) Reset()         { *m = QueryAllRewardV01Request{} }
func (m *QueryAllRewardV01Request) String() string { return proto.CompactTextString(m) }
func (*QueryAllRewardV01Request) ProtoMessage()    {}
func (*QueryAllRewardV01Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_05f327bea4a9f461, []int{4}
}
func (m *QueryAllRewardV01Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRewardV01Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRewardV01Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRewardV01Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRewardV01Request.Merge(m, src)
}
func (m *QueryAllRewardV01Request) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRewardV01Request) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRewardV01Request.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRewardV01Request proto.InternalMessageInfo

func (m *QueryAllRewardV01Request) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRewardV01Response struct {
	RewardV01  []*RewardV01        `protobuf:"bytes,1,rep,name=RewardV01,proto3" json:"RewardV01,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRewardV01Response) Reset()         { *m = QueryAllRewardV01Response{} }
func (m *QueryAllRewardV01Response) String() string { return proto.CompactTextString(m) }
func (*QueryAllRewardV01Response) ProtoMessage()    {}
func (*QueryAllRewardV01Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_05f327bea4a9f461, []int{5}
}
func (m *QueryAllRewardV01Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRewardV01Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRewardV01Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRewardV01Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRewardV01Response.Merge(m, src)
}
func (m *QueryAllRewardV01Response) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRewardV01Response) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRewardV01Response.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRewardV01Response proto.InternalMessageInfo

func (m *QueryAllRewardV01Response) GetRewardV01() []*RewardV01 {
	if m != nil {
		return m.RewardV01
	}
	return nil
}

func (m *QueryAllRewardV01Response) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetRewardRequest)(nil), "infx.infxbc.reward.QueryGetRewardRequest")
	proto.RegisterType((*QueryGetRewardResponse)(nil), "infx.infxbc.reward.QueryGetRewardResponse")
	proto.RegisterType((*QueryGetRewardV01Request)(nil), "infx.infxbc.reward.QueryGetRewardV01Request")
	proto.RegisterType((*QueryGetRewardV01Response)(nil), "infx.infxbc.reward.QueryGetRewardV01Response")
	proto.RegisterType((*QueryAllRewardV01Request)(nil), "infx.infxbc.reward.QueryAllRewardV01Request")
	proto.RegisterType((*QueryAllRewardV01Response)(nil), "infx.infxbc.reward.QueryAllRewardV01Response")
}

func init() { proto.RegisterFile("reward/query.proto", fileDescriptor_05f327bea4a9f461) }

var fileDescriptor_05f327bea4a9f461 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x3f, 0x8f, 0xd3, 0x30,
	0x18, 0xc6, 0xeb, 0x1c, 0x54, 0xaa, 0x41, 0x0c, 0x96, 0xa8, 0x8e, 0x88, 0x0b, 0xc8, 0xe2, 0xf8,
	0x13, 0x81, 0x4d, 0x0f, 0x31, 0x31, 0xa0, 0x63, 0xe0, 0xc4, 0x04, 0x64, 0x40, 0x88, 0xcd, 0x69,
	0x4c, 0xb0, 0x94, 0x8b, 0x73, 0xb1, 0x03, 0xad, 0x10, 0x0b, 0x1b, 0x1b, 0x02, 0xbe, 0x00, 0x9f,
	0x84, 0x95, 0xb1, 0x12, 0x0b, 0x23, 0x6a, 0xf9, 0x20, 0x28, 0xb1, 0x9b, 0x36, 0x34, 0x6a, 0x7b,
	0x4b, 0xa2, 0xd8, 0xcf, 0xfb, 0x3c, 0xbf, 0xbc, 0x7e, 0x13, 0x88, 0x72, 0xfe, 0x8e, 0xe5, 0x11,
	0x3d, 0x29, 0x78, 0x3e, 0x26, 0x59, 0x2e, 0xb5, 0x44, 0x48, 0xa4, 0xaf, 0x47, 0xa4, 0xbc, 0x84,
	0x43, 0x62, 0xf6, 0xdd, 0xcb, 0xb1, 0x94, 0x71, 0xc2, 0x29, 0xcb, 0x04, 0x65, 0x69, 0x2a, 0x35,
	0xd3, 0x42, 0xa6, 0xca, 0x54, 0xb8, 0xfe, 0x50, 0xaa, 0x63, 0xa9, 0x68, 0xc8, 0x14, 0x37, 0x56,
	0xf4, 0xed, 0x20, 0xe4, 0x9a, 0x0d, 0x68, 0xc6, 0x62, 0x91, 0x56, 0x62, 0xab, 0xed, 0xdb, 0x44,
	0x73, 0x7b, 0x71, 0x77, 0x60, 0xd6, 0x31, 0x85, 0x17, 0x9f, 0x97, 0x95, 0x47, 0x5c, 0x07, 0xd5,
	0x56, 0xc0, 0x4f, 0x0a, 0xae, 0x34, 0xea, 0xc3, 0x6e, 0xa1, 0x78, 0xfe, 0x24, 0xda, 0x05, 0x57,
	0xc1, 0xcd, 0x5e, 0x60, 0x9f, 0xf0, 0x53, 0xd8, 0xff, 0xbf, 0x40, 0x65, 0x32, 0x55, 0x1c, 0xdd,
	0x87, 0x5d, 0xe3, 0x5e, 0x55, 0x9c, 0x3b, 0xd8, 0x23, 0xab, 0x6f, 0x44, 0x82, 0x79, 0x7e, 0x60,
	0xc5, 0xd8, 0x87, 0xbb, 0x4d, 0xc3, 0x72, 0xd3, 0x42, 0x5c, 0x80, 0x8e, 0x30, 0x76, 0x67, 0x02,
	0x47, 0x44, 0xf8, 0x25, 0xbc, 0xd4, 0xa2, 0xb5, 0xf9, 0x0f, 0x60, 0xaf, 0x5e, 0xdc, 0x0e, 0x61,
	0xa1, 0xc7, 0xa1, 0xa5, 0x38, 0x4c, 0x92, 0x15, 0x8a, 0xc7, 0x10, 0x2e, 0xfa, 0x69, 0x9d, 0xaf,
	0x13, 0xd3, 0x7c, 0x52, 0x36, 0x9f, 0x98, 0x73, 0xb4, 0xcd, 0x27, 0xcf, 0x58, 0xcc, 0x6d, 0x6d,
	0xb0, 0x54, 0x89, 0xbf, 0x03, 0x8b, 0xdf, 0x0c, 0x69, 0xc7, 0xdf, 0x39, 0x0d, 0x3e, 0x3a, 0x6a,
	0x20, 0x3a, 0x15, 0xe2, 0x8d, 0x8d, 0x88, 0x26, 0x79, 0x99, 0xf1, 0xe0, 0xc7, 0x0e, 0x3c, 0x5b,
	0x31, 0xa2, 0x4f, 0x00, 0xf6, 0xea, 0x3e, 0xa3, 0x5b, 0x6d, 0x28, 0xad, 0x93, 0xe3, 0xfa, 0xdb,
	0x48, 0x4d, 0x34, 0xde, 0xff, 0xf8, 0xeb, 0xef, 0x57, 0xe7, 0x0a, 0xda, 0xa3, 0xa5, 0x9c, 0x9a,
	0x1a, 0x3b, 0xa4, 0x34, 0xae, 0xd3, 0xbf, 0x81, 0xa5, 0xe6, 0xa0, 0xdb, 0x9b, 0x03, 0x16, 0xa7,
	0xe7, 0xde, 0xd9, 0x52, 0x6d, 0x89, 0xfc, 0x8a, 0xe8, 0x1a, 0xc2, 0x6d, 0x44, 0xf5, 0xd7, 0x43,
	0xdf, 0x8b, 0xe8, 0x03, 0xfa, 0x02, 0xe0, 0xf9, 0xda, 0xe1, 0x30, 0x49, 0xd6, 0x90, 0xb5, 0xcc,
	0xd5, 0x1a, 0xb2, 0xb6, 0x01, 0x59, 0xdf, 0xab, 0x9a, 0xec, 0xd1, 0xc3, 0x9f, 0x53, 0x0f, 0x4c,
	0xa6, 0x1e, 0xf8, 0x33, 0xf5, 0xc0, 0xe7, 0x99, 0xd7, 0x99, 0xcc, 0xbc, 0xce, 0xef, 0x99, 0xd7,
	0x79, 0xb5, 0x1f, 0x0b, 0xfd, 0xa6, 0x08, 0xc9, 0x50, 0x1e, 0x37, 0x2c, 0x46, 0x73, 0x13, 0x3d,
	0xce, 0xb8, 0x0a, 0xbb, 0xd5, 0x9f, 0xe1, 0xde, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xc1,
	0xc3, 0xa8, 0xa5, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a list of getReward items.
	GetReward(ctx context.Context, in *QueryGetRewardRequest, opts ...grpc.CallOption) (*QueryGetRewardResponse, error)
	// Queries a rewardV01 by id.
	RewardV01(ctx context.Context, in *QueryGetRewardV01Request, opts ...grpc.CallOption) (*QueryGetRewardV01Response, error)
	// Queries a list of rewardV01 items.
	RewardV01All(ctx context.Context, in *QueryAllRewardV01Request, opts ...grpc.CallOption) (*QueryAllRewardV01Response, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetReward(ctx context.Context, in *QueryGetRewardRequest, opts ...grpc.CallOption) (*QueryGetRewardResponse, error) {
	out := new(QueryGetRewardResponse)
	err := c.cc.Invoke(ctx, "/infx.infxbc.reward.Query/GetReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardV01(ctx context.Context, in *QueryGetRewardV01Request, opts ...grpc.CallOption) (*QueryGetRewardV01Response, error) {
	out := new(QueryGetRewardV01Response)
	err := c.cc.Invoke(ctx, "/infx.infxbc.reward.Query/RewardV01", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardV01All(ctx context.Context, in *QueryAllRewardV01Request, opts ...grpc.CallOption) (*QueryAllRewardV01Response, error) {
	out := new(QueryAllRewardV01Response)
	err := c.cc.Invoke(ctx, "/infx.infxbc.reward.Query/RewardV01All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a list of getReward items.
	GetReward(context.Context, *QueryGetRewardRequest) (*QueryGetRewardResponse, error)
	// Queries a rewardV01 by id.
	RewardV01(context.Context, *QueryGetRewardV01Request) (*QueryGetRewardV01Response, error)
	// Queries a list of rewardV01 items.
	RewardV01All(context.Context, *QueryAllRewardV01Request) (*QueryAllRewardV01Response, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetReward(ctx context.Context, req *QueryGetRewardRequest) (*QueryGetRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReward not implemented")
}
func (*UnimplementedQueryServer) RewardV01(ctx context.Context, req *QueryGetRewardV01Request) (*QueryGetRewardV01Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardV01 not implemented")
}
func (*UnimplementedQueryServer) RewardV01All(ctx context.Context, req *QueryAllRewardV01Request) (*QueryAllRewardV01Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardV01All not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infx.infxbc.reward.Query/GetReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReward(ctx, req.(*QueryGetRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardV01_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRewardV01Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardV01(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infx.infxbc.reward.Query/RewardV01",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardV01(ctx, req.(*QueryGetRewardV01Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardV01All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRewardV01Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardV01All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infx.infxbc.reward.Query/RewardV01All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardV01All(ctx, req.(*QueryAllRewardV01Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infx.infxbc.reward.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReward",
			Handler:    _Query_GetReward_Handler,
		},
		{
			MethodName: "RewardV01",
			Handler:    _Query_RewardV01_Handler,
		},
		{
			MethodName: "RewardV01All",
			Handler:    _Query_RewardV01All_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reward/query.proto",
}

func (m *QueryGetRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reward != nil {
		{
			size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRewardV01Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRewardV01Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRewardV01Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRewardV01Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRewardV01Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRewardV01Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardV01 != nil {
		{
			size, err := m.RewardV01.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRewardV01Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRewardV01Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRewardV01Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRewardV01Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRewardV01Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRewardV01Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardV01) > 0 {
		for iNdEx := len(m.RewardV01) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardV01[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRewardV01Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetRewardV01Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardV01 != nil {
		l = m.RewardV01.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRewardV01Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRewardV01Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardV01) > 0 {
		for _, e := range m.RewardV01 {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &RewardV01{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRewardV01Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRewardV01Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRewardV01Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRewardV01Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRewardV01Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRewardV01Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardV01", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardV01 == nil {
				m.RewardV01 = &RewardV01{}
			}
			if err := m.RewardV01.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRewardV01Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRewardV01Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRewardV01Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRewardV01Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRewardV01Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRewardV01Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardV01", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardV01 = append(m.RewardV01, &RewardV01{})
			if err := m.RewardV01[len(m.RewardV01)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
